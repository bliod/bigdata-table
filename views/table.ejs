<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/app.css" />
    <script src="/app.js"></script>
    <script src="/handlers.js"></script>
    <title>Table</title>
  </head>
  <body>
    <div class="container">
      <h4>Last selected value : <span id="selection"></span></h4>
      <table id="table" style="width: 100%"></table>
      <div class="pagnation-wrapper">
        <button id="backwards"><<</button>
        <button id="prev">prev</button>
        <div class="pagenumbers" id="pagination"></div>
        <button id="next">next</button>
        <button id="forwards">>></button>
      </div>
    </div>
  </body>

  <script type="text/javascript">
    const data = <%-JSON.stringify(json)%>;
    const listElement = document.getElementById("table");
    const pagnationElement = document.getElementById("pagination");
    const selection = document.getElementById("selection");
    let current_page = 1;
    let rows = 20;

    function DisplayList(items, wrapper, rows_per_page, page) {
      wrapper.innerHTML = "";
      page--;
      let start = rows_per_page * page;
      let end = start + rows_per_page;
      let paginatedItems = items.slice(start, end);
      let headers = document.getElementsByTagName("th");
      let column = document.createElement("tr");

      //create table column headers and add to table
      const headerElements = createHeaders(headers)
      column.append(...headerElements);
      wrapper.appendChild(column);

      //create each row items
      paginatedItems.forEach((el,i)=>{
        let item_element = document.createElement("tr");
        let thName = document.createElement("td");
        let thId = document.createElement("td");
        let thAge = document.createElement("td");
        let thBalance = document.createElement("td");

        thName.innerText = paginatedItems[i].name;
        thId.innerText = paginatedItems[i]._id;
        thAge.innerText = paginatedItems[i].age;
        thBalance.innerText = paginatedItems[i].balance;

        //add event listener to each row item
        item_element.onclick=((el)=>handleItemClick(el,listElement))
        item_element.append(thId, thName, thAge, thBalance);

        wrapper.appendChild(item_element);
      })
    }

    function SetupPagination(items, wrapper, rows_per_page) {
      let backwards = document.getElementById("backwards");
      let forwards = document.getElementById("forwards");
      let prev = document.getElementById("prev");
      let next = document.getElementById("next");
      let btnCount = 1;

      let page_count = Math.ceil(items.length / rows_per_page);

      prev.addEventListener("click", () => {
        //update class button
        if (current_page > 1) {
          let removeCurrent = document.getElementById(`btn${current_page}`);
          removeCurrent.classList.remove("active");

          current_page -= 1;
          DisplayList(items, listElement, rows, current_page);

          console.log(current_page, btnCount);
          if (current_page < btnCount) {
            btnCount -= 10;
            wrapper.innerHTML = "";
            if (btnCount < 0) {
              btnCount = 1;
            }
            for (let i = btnCount; i < btnCount + 10; i++) {
              let btn = PaginationButton(i, items);
              wrapper.appendChild(btn);
            }
          }
          let addPrev = document.getElementById(`btn${current_page}`);
          addPrev.classList.add("active");
        }
      });

      next.addEventListener("click", () => {
        if (current_page < page_count) {
          let removeCurrent = document.getElementById(`btn${current_page}`);
          removeCurrent.classList.remove("active");

          current_page += 1;
          DisplayList(items, listElement, rows, current_page);

          if (current_page > btnCount + 9) {
            btnCount += 10;
            wrapper.innerHTML = "";
            for (let i = btnCount; i < btnCount + 10; i++) {
              if (i <= page_count) {
                //Append only till page count
                let btn = PaginationButton(i, items);
                wrapper.appendChild(btn);
              }
            }
          }

          let addNext = document.getElementById(`btn${current_page}`);
          addNext.classList.add("active");
        }
      });

      forwards.addEventListener("click", () => {
        // console.log(btnCount,'btnCount')
        if (btnCount + 10 > page_count) {
          //Dont add more that available page count
          return;
        }
        btnCount += 10;
        wrapper.innerHTML = "";
        for (let i = btnCount; i < btnCount + 10; i++) {
          if (i <= page_count) {
            //Append only till page count
            let btn = PaginationButton(i, items);
            wrapper.appendChild(btn);
          }
        }
      });
      backwards.addEventListener("click", () => {
        btnCount -= 10;
        wrapper.innerHTML = "";
        if (btnCount < 0) {
          btnCount = 1;
        }
        for (let i = btnCount; i < btnCount + 10; i++) {
          let btn = PaginationButton(i, items);
          wrapper.appendChild(btn);
        }
      });
      for (let i = btnCount; i < btnCount + 10; i++) {
        let btn = PaginationButton(i, items);

        wrapper.appendChild(btn);
      }
    }

    function PaginationButton(page, items) {
      let button = document.createElement("button");

      button.innerText = page;
      button.id = `btn${page}`;

      if (current_page == page) button.classList.add("active");

      button.addEventListener("click", function () {
        current_page = page;
        DisplayList(items, listElement, rows, current_page);

        let current_btn = document.querySelector(".pagenumbers button.active");
        current_btn.classList.remove("active");

        button.classList.add("active");
      });

      return button;
    }

    DisplayList(data, listElement, rows, current_page);
    SetupPagination(data, pagnationElement, rows);
  </script>
  <script>
    function sortTable(column) {
      let table, rows, switching, i, x, y, shouldSwitch;
      let isSorted = column.dataset.sorted;

      table = document.getElementById("table");
      switching = true;
      /*Make a loop that will continue until
      no switching has been done:*/
      while (switching) {
        //start by saying: no switching is done:
        switching = false;
        rows = table.rows;
        // console.log(rows);
        /*Loop through all table rows (except the
        first, which contains table headers):*/
        for (i = 1; i < rows.length - 1; i++) {
          // console.log(i);
          //start by saying there should be no switching:
          shouldSwitch = false;
          /*Get the two elements you want to compare,
          one from current row and one from the next:*/
          x = rows[i].getElementsByTagName("TD")[column.dataset.id];
          y = rows[i + 1].getElementsByTagName("TD")[column.dataset.id];
          //check if the two rows should switch place:
          if (isSorted === "true") {
            if (column.dataset.id == 0 || column.dataset.id == 2) {
              if (parseInt(x.innerHTML) < parseInt(y.innerHTML)) {
                //if so, mark as a switch and break the loop:
                shouldSwitch = true;
                console.log("not else");
                break;
              }
            } else {
              console.log("else");
              if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                //if so, mark as a switch and break the loop:
                shouldSwitch = true;
                break;
              }
            }
          } else {
            if (column.dataset.id == 0 || column.dataset.id == 2) {
              if (parseInt(x.innerHTML) > parseInt(y.innerHTML)) {
                shouldSwitch = true;
                break;
              }
            } else {
              if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                shouldSwitch = true;
                break;
              }
            }
          }
        }
        if (shouldSwitch) {
          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
          switching = true;
        }
      }
      if (isSorted === "true") {
        column.dataset.sorted = "false";
      } else {
        column.dataset.sorted = "true";
      }
    }
  </script>
</html>
